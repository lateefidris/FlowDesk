<div class="container">
  <div class="calendar">
    <div class="header">
      <div class="month"></div>
      <div class="btns">
        <div class="btn today-btn">
          <i class="fas fa-calendar-day"></i>
        </div>
        <div class="btn prev-btn">
          <i class="fas fa-chevron-left"></i>
        </div>
        <div class="btn next-btn">
          <i class="fas fa-chevron-right"></i>
        </div>
      </div>
    </div>
    <div class="weekdays">
      <div class="day">Sun</div>
      <div class="day">Mon</div>
      <div class="day">Tue</div>
      <div class="day">Wed</div>
      <div class="day">Thu</div>
      <div class="day">Fri</div>
      <div class="day">Sat</div>
    </div>
    <div class="days">
      <!-- Days added via JavaScript -->
    </div>
  </div>
  <div class="selected-date-time text-center pt-3">Selected Date and Time: <span id="selectedDateTimeDisplay" class="font-bold">None</span></div>
</div>

<dialog id="timeSlotsModal" class="modal">
  <div class="modal-box text-center">
    <h2 class="font-bold">Available Time Slots</h2>
    <div class="time-slots">
      <!-- Time slots will be dynamically added here -->
    </div>
    <input type="text" id="selectedDate" class="text-center rounded" readonly> <!-- Hidden or visible as per your design -->
  </div>
</dialog>

<script type="text/javascript">
  var availabilities = <%= raw current_user.desks.availability.map { |availability|
    availability.as_json(methods: [:formatted_start_time, :formatted_end_time])
  }.to_json.html_safe %>;
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
  const daysContainer = document.querySelector(".days"),
  nextBtn = document.querySelector(".next-btn"),
  prevBtn = document.querySelector(".prev-btn"),
  month = document.querySelector(".month"),
  todayBtn = document.querySelector(".today-btn");
   // Select the Rails form datetime input

  const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
  ];

  const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

  // get current date
  const date = new Date();

  // get current month
  let currentMonth = date.getMonth();

  // get current year
  let currentYear = date.getFullYear();

  // function to render days
  function renderCalendar() {
  // get prev month current month and next month days
  date.setDate(1);
  const firstDay = new Date(currentYear, currentMonth, 1);
  const lastDay = new Date(currentYear, currentMonth + 1, 0);
  const lastDayIndex = lastDay.getDay();
  const lastDayDate = lastDay.getDate();
  const prevLastDay = new Date(currentYear, currentMonth, 0);
  const prevLastDayDate = prevLastDay.getDate();
  const nextDays = 7 - lastDayIndex - 1;

  // update current year and month in header
  month.innerHTML = `${months[currentMonth]} ${currentYear}`;

  // update days html
  let days = "";

  // prev days html
  for (let x = firstDay.getDay(); x > 0; x--) {
    days += `<div class="day prev" data-date="${prevLastDayDate - x + 1}">${prevLastDayDate - x + 1}</div>`;
  }

  // current month days
  for (let i = 1; i <= lastDayDate; i++) {
    // check if its today then add today class
    if (
      i === new Date().getDate() &&
      currentMonth === new Date().getMonth() &&
      currentYear === new Date().getFullYear()
    ) {
      // if date month year matches add today
      days += `<div class="day today" data-date="${i}">${i}</div>`;
    } else {
      //else dont add today
      days += `<div class="day " data-date="${i}">${i}</div>`;
    }
  }

  // next MOnth days
  for (let j = 1; j <= nextDays; j++) {
    days += `<div class="day next" data-date="${j}">${j}</div>`;
  }

  // run this function with every calendar render
  daysContainer.innerHTML = days;
  hideTodayBtn();
  addDayClickEvent();
  }

  function addDayClickEvent() {
  // Select only the days that do not have the 'prev' or 'next' class
  document.querySelectorAll(".days .day:not(.prev):not(.next)").forEach(day => {
    day.addEventListener("click", function() {
      const selectedDay = day.dataset.date;
      const selectedMonth = months[currentMonth];
      const selectedYear = currentYear; // Capture the year as well
      const selectedDate = `${selectedDay} ${selectedMonth} ${selectedYear}`;

      // Set the selected date in the input and display areas
      document.getElementById("selectedDate").value = `${selectedMonth} ${selectedDay}, ${selectedYear}`

      // Format the friendly date for the first click display
      const friendlyDate = `${selectedMonth} ${selectedDay}, ${selectedYear}`;
      document.getElementById("selectedDateTimeDisplay").textContent = friendlyDate;

      // Populate time slots based on the selected date
      populateTimeSlots(selectedDate);
      document.getElementById("timeSlotsModal").show();
    });
  });
}


 function populateTimeSlots(selectedDate) {
  const timeSlotsContainer = document.querySelector(".time-slots");
  timeSlotsContainer.innerHTML = ''; // Clear previous time slots
  const appointmentInput = document.getElementById('appointmentInput'); // Ensure this is the correct ID for your input field
  const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  const currentYear = new Date(selectedDate).getFullYear();
  const currentMonth = new Date(selectedDate).getMonth();

  // Parse the selected date to get the day of the week
  const dateObj = new Date(selectedDate);
  const dayOfWeek = dateObj.toLocaleString('en-us', { weekday: 'long' });

  // Filter availabilities for the selected day of the week
  const daySlots = availabilities.filter(slot => slot.day_of_the_week === dayOfWeek);

  if (daySlots.length === 0) {
    timeSlotsContainer.textContent = 'No time slots available';
    return;
  }

  // Create a <ul> element to hold the list items
  const list = document.createElement("ul");
  list.className = 'time-slot-list';

  // Iterate over filtered time slots for the day
  daySlots.forEach(slot => {
    const startHour = new Date(slot.start_time);
    const endHour = new Date(slot.end_time);

    // Loop through each hour from start to end
    for (let hour = new Date(startHour); hour <= endHour; hour.setHours(hour.getHours() + 1)) {
      const listItem = document.createElement("li");
      listItem.className = 'time-slot-item';
      const formattedHour = hour.toLocaleTimeString('en-US', { timeZone: 'UTC', hour: '2-digit', minute: '2-digit' });
      listItem.textContent = formattedHour;

      // Add a click event listener to each list item
      listItem.addEventListener('click', () => {
        const dateTime = new Date(`${selectedDate} ${formattedHour}`);
        const timeZoneOffset = dateTime.getTimezoneOffset() * 60000; // offset in milliseconds
        const localTime = new Date(dateTime.getTime() - timeZoneOffset);
        const isoDate = localTime.toISOString().slice(0, 16); // Formats date to 'YYYY-MM-DDTHH:MM' format
        const friendlyDate = `${months[currentMonth]} ${dateTime.getDate()}, ${currentYear} ${formattedHour}`;
        const appointmentInput = document.getElementById("booking_appointment");

        document.getElementById("selectedDateTimeDisplay").textContent = friendlyDate;
        appointmentInput.value = isoDate;
        document.getElementById("timeSlotsModal").close(); // Close the modal after selecting a time
      });

      list.appendChild(listItem);
    }
  });

  timeSlotsContainer.appendChild(list); // Append the list to the container
}





  renderCalendar();

  nextBtn.addEventListener("click", () => {
  // increase current month by one
  currentMonth++;
  if (currentMonth > 11) {
    // if month gets greater that 11 make it 0 and increase year by one
    currentMonth = 0;
    currentYear++;
  }
  // rerender calendar
  renderCalendar();
  });

  // prev monyh btn
  prevBtn.addEventListener("click", () => {
  // increase by one
  currentMonth--;
  // check if let than 0 then make it 11 and deacrease year
  if (currentMonth < 0) {
    currentMonth = 11;
    currentYear--;
  }
  renderCalendar();
  });

  // go to today
  todayBtn.addEventListener("click", () => {
  // set month and year to current
  currentMonth = date.getMonth();
  currentYear = date.getFullYear();
  // rerender calendar
  renderCalendar();
  });

  // Add the event listener for closing the modal on click outside
  document.getElementById('timeSlotsModal').addEventListener('click', function(event) {
  if (event.target === this) {
    this.close(); // Adjust this line if needed depending on your modal handling
  }
  });

  // lets hide today btn if its already current month and vice versa

  function hideTodayBtn() {
  if (
    currentMonth === new Date().getMonth() &&
    currentYear === new Date().getFullYear()
  ) {
    todayBtn.style.display = "none";
  } else {
    todayBtn.style.display = "flex";
  }
  }
  });
</script>
